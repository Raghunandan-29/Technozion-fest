/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 ./public/models/portal.glb 
Author: MA3D (https://sketchfab.com/SculptMike)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/mana-fantasy-teamed-portal-7c01afe6651c45cb85470065353a8287
Title: Mana Fantasy Teamed Portal
*/

import React, { useRef } from 'react'
import { useGLTF} from '@react-three/drei'
import { useFrame } from 'react-three-fiber';
// import { currentRotation, currentPosition } from './Portal_Animate_state';
// import { useAnimation } from './Portal_Animate_state';

export function Portal(props) {
  const { nodes, materials } = useGLTF('./models/portal.glb');
  const groupRef = useRef();
  const scale = 5;
  const position=[-0.1,-2,0];
  const rotation =[0,3,0];
  // Animation variables
  const initialRotation = [0, 3, 0];
  const targetRotation = [0, 0, 0];
  const rotationSpeed = 0.5;

  const initialPosition = [-0.1, -2.1, 0];
  const targetPosition = [-0.1, -2.1, 2];
  const positionSpeed = 0.2;

  // Use useRef to store the current rotation value
  const currentRotation = useRef([...initialRotation]);
  const currentPosition = useRef([...initialPosition]);
  // Use the custom hook to get the refs
  //const { currentRotation, currentPosition, setDynamicValues } = useAnimation();


//   useFrame((state, delta) => {
//     // Gradually decrease the Y-axis rotation value
//     currentRotation.current[1] -= rotationSpeed * delta;

//     // Ensure the rotation doesn't go below the target value
//     if (currentRotation.current[1] < targetRotation[1]) {
//       currentRotation.current[1] = targetRotation[1];
//     }

//     // Apply the updated rotation to the group
//     groupRef.current.rotation.set(...currentRotation.current);
//   });
useFrame((state, delta) => {
    // Gradually decrease the Y-axis rotation value
    if (currentRotation.current[1] > targetRotation[1]) {
      currentRotation.current[1] -= rotationSpeed * delta;

      // Ensure the rotation doesn't go below the target value
      if (currentRotation.current[1] < targetRotation[1]) {
        currentRotation.current[1] = targetRotation[1];
      }
    } else {
      // Gradually increase the Z-axis position value
      currentPosition.current[2] += positionSpeed * delta;

      // Ensure the position doesn't go beyond the target value
      if (currentPosition.current[2] > targetPosition[2]) {
        currentPosition.current[2] = targetPosition[2];
      }
    }

    // Apply the updated rotation and position to the group
    groupRef.current.rotation.set(...currentRotation.current);
    groupRef.current.position.set(...currentPosition.current);

    // Set dynamic values in the context
    //setDynamicValues(currentRotation.current, currentPosition.current);
  });


  return (
    <group {...props} ref={groupRef} dispose={null} scale={[scale,scale,scale]} position={position} >
      <group position={[0.13, 0.312, 0.725]} rotation={[-3.13, -0.352, -3.138]} scale={[0.014, 0.015, 0.014]}>
        <mesh geometry={nodes.Object_22.geometry} material={materials['Material.056']} />
        <mesh geometry={nodes.Object_23.geometry} material={materials['Material.056']} />
        <mesh geometry={nodes.Object_24.geometry} material={materials['Material.056']} />
        <mesh geometry={nodes.Object_25.geometry} material={materials['Material.056']} />
      </group>
      <group position={[-0.075, 0.312, 0.725]} rotation={[-0.014, 0.644, 0.008]} scale={[0.014, 0.015, 0.014]}>
        <mesh geometry={nodes.Object_27.geometry} material={materials['Material.002']} />
        <mesh geometry={nodes.Object_28.geometry} material={materials['Material.002']} />
        <mesh geometry={nodes.Object_29.geometry} material={materials['Material.002']} />
        <mesh geometry={nodes.Object_30.geometry} material={materials['Material.002']} />
      </group>
      <mesh geometry={nodes.Object_4.geometry} material={materials.Material} position={[0.025, 0.309, 0.674]} rotation={[1.571, 0, 0]} scale={[0.012, 0.013, 0.012]} />
      <mesh geometry={nodes.Object_6.geometry} material={materials.material_0} position={[0.025, 0.313, 0.694]} scale={[0.188, 0.033, 0.188]} />
      <mesh geometry={nodes.Object_8.geometry} material={materials['Material.074']} position={[0.025, 0.383, 0.686]} scale={[0.039, 0.006, 0.011]} />
      <mesh geometry={nodes.Object_10.geometry} material={materials['Material.073']} position={[0.025, 0.372, 0.72]} scale={[0.039, 0.006, 0.011]} />
      <mesh geometry={nodes.Object_12.geometry} material={materials['Material.072']} position={[0.025, 0.364, 0.753]} scale={[0.039, 0.006, 0.011]} />
      <mesh geometry={nodes.Object_14.geometry} material={materials['Material.071']} position={[0.025, 0.357, 0.786]} scale={[0.039, 0.006, 0.011]} />
      <mesh geometry={nodes.Object_16.geometry} material={materials['Material.070']} position={[0.025, 0.346, 0.819]} scale={[0.039, 0.006, 0.011]} />
      <mesh geometry={nodes.Object_18.geometry} material={materials['Material.069']} position={[0.025, 0.326, 0.848]} scale={[0.039, 0.006, 0.011]} />
      <mesh geometry={nodes.Object_20.geometry} material={materials['Material.068']} position={[0.025, 0.312, 0.867]} scale={[0.039, 0.006, 0.011]} />
      <mesh geometry={nodes.Object_32.geometry} material={materials['Material.013']} position={[-0.082, 0.341, 0.786]} rotation={[0.394, -0.546, 0.538]} scale={0.007} />
      <mesh geometry={nodes.Object_34.geometry} material={materials['Material.005']} position={[0.107, 0.341, 0.78]} rotation={[0.338, -1.242, 0.523]} scale={0.007} />
      <mesh geometry={nodes.Object_36.geometry} material={materials['Material.067']} position={[0.025, 0.422, 0.675]} rotation={[1.57, 0, 0]} scale={[0.131, 0.005, 0.13]} />
      <mesh geometry={nodes.Object_38.geometry} material={materials['Material.075']} position={[-0.099, 0.335, 0.778]} rotation={[-0.271, -0.65, 2.002]} scale={[0.028, 0.024, 0.027]} />
      <mesh geometry={nodes.Object_40.geometry} material={materials['Material.076']} position={[0.142, 0.338, 0.774]} rotation={[-2.76, 0.757, 3.089]} scale={[0.027, 0.022, 0.027]} />
      <mesh geometry={nodes.Object_42.geometry} material={materials['Material.077']} position={[0.025, 0.444, 0.714]} rotation={[1.57, 0, 0]} scale={[0.171, 0.006, 0.14]} />
    </group>
  )
}

useGLTF.preload('./models/portal.glb');


