/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 public/models/primary_ion_drive.glb 
Author: indierocktopus (https://sketchfab.com/indierocktopus)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/primary-ion-drive-d3f50a66fee74c6588dd9bc92f7fe7b3
Title: Primary Ion Drive ///
*/

import React, { useRef,useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useFrame } from 'react-three-fiber';
import gsap from 'gsap';


export function Main_section_1_model(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('./models/primary_ion_drive.glb')
  const { actions } = useAnimations(animations, group)
  const scale = 2;
  //const intialPostion =[0,-1,0];
  const maxScale =1.55;
  const endAnimationScrollY = 230; // Define the scrollY value to end the animation

  
  // Use useFrame to update rotation on each frame
  useFrame((state, delta) => {
    // Replace 0.01 with your desired rotation speed
    // group.current.rotation.y += 0.1 * delta;
    // group.current.rotation.x += 0.1 * delta;
  });

    // Use gsap for animation
    const tl = gsap.timeline();
     
    // Use useEffect to set up GSAP animations
    useEffect(() => {
    // Initial animation setup
    tl.to(group.current.rotation, { y:0, x: 0, z: 0, duration: 1 }); // Example initial rotation
    tl.to(group.current.scale, { x: 1, y: 1, z: 1, duration: 1 }, 0); // Example initial scale
    tl.to(group.current.position, { x: 0, y: 1.25, z: 0, duration:1},0); // Example initial position
    // Use scroll event for animations
    
    const handleScroll = () => {
      const scrollY = window.scrollY;
      //console.log(scrollY);
      if(scrollY>=417 && scrollY<=460){
        return;
      }
        // Check if scrollY has reached the end value
      if (scrollY >= 230 && scrollY <=250) {
        // If scrollY is greater than or equal to 230, stop the animation
        return;
      }

      // Adjust the values as needed for your desired effect
      let rotationY = scrollY / 100;
      let rotationX = scrollY / 250;
      let rotationZ = scrollY / 300;

      // Check if rotation values have reached certain thresholds
      if (rotationY >= 2.2 && rotationX >= 1.1 && rotationZ >= 0.735) {
        // Introduce a delay of 2 seconds
        tl.to({}, { duration: 10 });

        // Set new rotation values after the delay
        rotationY = 2.2+ scrollY/2000 ;
        rotationX = 1.1 + scrollY/500;
        rotationZ = 0.735- scrollY/1000;
      }

      // console.log(rotationY, rotationX, rotationZ);

      let scaleValue = 1.25 + scrollY / 800;

      let translationY = gsap.utils.mapRange(0, window.innerHeight, -1, 1, scrollY, true); // Example cubic bezier easing
      if(scrollY<400){
         translationY=1.25;
      }
      // let translationY = 1.25+scrollY/100000; // Adjust the division factor as needed for the parallax effect
      // if(translationY>=1.27){
      //   translationY=1.27;
      // }
      //  translationY = Math.min(scrollY / 3000 ,1.15);
       //console.log(translationY);
      // Ensure that scaleValue does not exceed maxScale
      scaleValue = Math.min(scaleValue, maxScale);
      // console.log(scaleValue);

      // GSAP animation
      tl.to(group.current.rotation, { y: rotationY, x: rotationX, z: rotationZ, duration: 0.5 }, 0);
      tl.to(group.current.scale, { x: scaleValue, y: scaleValue, z: scaleValue, duration: 0.5 }, 0);
      tl.to(group.current.position, { y: translationY, duration: 0.5 }, 0);
    };

    // Attach scroll event listener
    window.addEventListener('scroll', handleScroll);

    // Clean up the event listener on component unmount
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, [tl]);



  return (
    <group ref={group} {...props} dispose={null} scale={[scale, scale, scale]}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="f10517d4966d42c99c9bc47c460a132ffbx" rotation={[Math.PI / 2, 0, 0]}>
            <group name="Object_2">
              <group name="RootNode">
                <group name="circle">
                  <mesh name="circle_constant1_0" geometry={nodes.circle_constant1_0.geometry} material={materials.constant1} />
                  <mesh name="circle_HoloFillDark_0" geometry={nodes.circle_HoloFillDark_0.geometry} material={materials.HoloFillDark} />
                </group>
                <group name="geo1">
                  <mesh name="geo1_constant1_0" geometry={nodes.geo1_constant1_0.geometry} material={materials.constant1} />
                  <mesh name="geo1_HoloFillDark_0" geometry={nodes.geo1_HoloFillDark_0.geometry} material={materials.HoloFillDark} />
                </group>
                <group name="circle1">
                  <mesh name="circle1_constant2_0" geometry={nodes.circle1_constant2_0.geometry} material={materials.constant2} />
                </group>
                <group name="circle2">
                  <mesh name="circle2_constant2_0" geometry={nodes.circle2_constant2_0.geometry} material={materials.constant2} />
                </group>
                {/* <group name="cam1" position={[0, 0, 8.8]} rotation={[0, Math.PI / 2, 0]}>
                  <group name="Object_11" />
                </group> */}
                {/* <group name="cam2" position={[-4.13, 4.452, 5.82]} rotation={[-0.022, 0.961, -0.54]}>
                  <group name="Object_17" />
                </group> */}
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('./models/primary_ion_drive.glb')







